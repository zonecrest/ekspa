{
  "name": "Chat with Metering Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-demo",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract data from webhook\nconst body = $input.item.json.body;\nconst userMessage = body.message;\nconst userId = body.userId;\nconst usageType = body.usageType || 'token';\nconst timestamp = body.timestamp;\n\n// Validate required fields\nif (!userMessage || !userId) {\n  throw new Error('Missing required fields: message and userId');\n}\n\nreturn {\n  userMessage,\n  userId,\n  usageType,\n  timestamp,\n  originalBody: body\n};"
      },
      "id": "extract-data-node",
      "name": "Extract Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "lookupByValue",
        "documentId": "YOUR_GOOGLE_SHEETS_ID",
        "sheetName": "Users",
        "lookupColumn": "userId",
        "lookupValue": "={{ $json.userId }}",
        "options": {}
      },
      "id": "lookup-user-node",
      "name": "Lookup User",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get user data and usage type from previous nodes\nconst extractedData = $('Extract Data').first().json;\nconst userData = $input.item.json;\nconst usageType = extractedData.usageType;\n\n// Check if user exists\nif (!userData || !userData.userId) {\n  return {\n    hasUsage: false,\n    error: 'User not found',\n    shouldCreateUser: true,\n    usageType: usageType,\n    extractedData: extractedData\n  };\n}\n\n// Check usage limits based on type\nif (usageType === 'token') {\n  const tokensLeft = parseInt(userData.tokensLeft) || 0;\n  if (tokensLeft <= 0) {\n    return {\n      hasUsage: false,\n      error: 'No tokens remaining',\n      tokensLeft: 0,\n      usageType: usageType\n    };\n  }\n  return {\n    hasUsage: true,\n    tokensLeft: tokensLeft,\n    usageType: usageType,\n    userData: userData,\n    extractedData: extractedData\n  };\n}\n\nif (usageType === 'attempt') {\n  const attemptsLeft = parseInt(userData.attemptsLeft) || 0;\n  if (attemptsLeft <= 0) {\n    return {\n      hasUsage: false,\n      error: 'No attempts remaining',\n      attemptsLeft: 0,\n      usageType: usageType\n    };\n  }\n  return {\n    hasUsage: true,\n    attemptsLeft: attemptsLeft,\n    usageType: usageType,\n    userData: userData,\n    extractedData: extractedData\n  };\n}\n\n// Unlimited users\nreturn {\n  hasUsage: true,\n  usageType: 'unlimited',\n  userData: userData,\n  extractedData: extractedData\n};"
      },
      "id": "check-usage-node",
      "name": "Check Usage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.hasUsage }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "usage-check-if-node",
      "name": "Has Usage?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process the user's message and generate AI response\nconst checkResult = $input.item.json;\nconst userMessage = checkResult.extractedData.userMessage;\nconst userId = checkResult.extractedData.userId;\nconst usageType = checkResult.usageType;\n\n// Simple response logic for demo (replace with actual AI integration)\nlet aiResponse = \"\";\n\nif (userMessage.toLowerCase().includes('hello') || userMessage.toLowerCase().includes('hi')) {\n  aiResponse = \"Hello! How can I help you today? You're using the \" + usageType + \" plan.\";\n} else if (userMessage.toLowerCase().includes('weather')) {\n  aiResponse = \"I'd normally check the weather for you, but this is a demo response. In a real setup, I'd integrate with weather APIs!\";\n} else if (userMessage.toLowerCase().includes('help')) {\n  aiResponse = \"I'm here to help! This is a demonstration of an n8n-powered chat system with usage tracking (\" + usageType + \" mode).\";\n} else if (userMessage.toLowerCase().includes('usage') || userMessage.toLowerCase().includes('credits') || userMessage.toLowerCase().includes('tokens')) {\n  if (usageType === 'token') {\n    aiResponse = `You're on the token plan. Each message consumes one credit. You currently have ${checkResult.tokensLeft || 'unknown'} credits remaining.`;\n  } else if (usageType === 'attempt') {\n    aiResponse = `You're on the attempt-limited plan. You have ${checkResult.attemptsLeft || 'unknown'} attempts remaining in this session.`;\n  } else {\n    aiResponse = \"You have unlimited access! Chat as much as you'd like.\";\n  }\n} else {\n  aiResponse = `I received your message: \"${userMessage}\". This is a demo response from the n8n workflow (${usageType} plan). In a real implementation, this could integrate with OpenAI, Claude, or other AI services.`;\n}\n\n// Return the AI response along with the data needed for usage deduction\nreturn {\n  aiResponse: aiResponse,\n  userId: userId,\n  usageType: usageType,\n  userData: checkResult.userData,\n  shouldDeduct: true,\n  processedAt: new Date().toISOString()\n};"
      },
      "id": "ai-processing-node",
      "name": "AI Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": "YOUR_GOOGLE_SHEETS_ID",
        "sheetName": "Users",
        "columnToMatchOn": "userId",
        "valueToMatchOn": "={{ $json.userId }}",
        "fieldsUi": {
          "values": [
            {
              "column": "tokensLeft",
              "value": "={{ $json.usageType === 'token' ? ($json.userData.tokensLeft - 1) : $json.userData.tokensLeft }}"
            },
            {
              "column": "attemptsLeft",
              "value": "={{ $json.usageType === 'attempt' ? ($json.userData.attemptsLeft - 1) : $json.userData.attemptsLeft }}"
            },
            {
              "column": "lastUsed",
              "value": "={{ $json.processedAt }}"
            },
            {
              "column": "totalUsed",
              "value": "={{ ($json.userData.totalUsed || 0) + 1 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "deduct-usage-node",
      "name": "Deduct Usage",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"response\": $('AI Processing').first().json.aiResponse,\n  \"usageType\": $('AI Processing').first().json.usageType,\n  \"tokensLeft\": $('AI Processing').first().json.usageType === 'token' ? ($('AI Processing').first().json.userData.tokensLeft - 1) : undefined,\n  \"attemptsLeft\": $('AI Processing').first().json.usageType === 'attempt' ? ($('AI Processing').first().json.userData.attemptsLeft - 1) : undefined,\n  \"timestamp\": $('AI Processing').first().json.processedAt\n} }}"
      },
      "id": "success-response-node",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": $json.error,\n  \"usageType\": $json.usageType,\n  \"tokensLeft\": $json.tokensLeft,\n  \"attemptsLeft\": $json.attemptsLeft,\n  \"timestamp\": new Date().toISOString()\n} }}"
      },
      "id": "error-response-node",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": "YOUR_GOOGLE_SHEETS_ID",
        "sheetName": "Users",
        "columnToMatchOn": "userId",
        "valueToMatchOn": "={{ $json.extractedData.userId }}",
        "fieldsUi": {
          "values": [
            {
              "column": "userId",
              "value": "={{ $json.extractedData.userId }}"
            },
            {
              "column": "usageType",
              "value": "={{ $json.usageType }}"
            },
            {
              "column": "tokensLeft",
              "value": "={{ $json.usageType === 'token' ? 49 : 0 }}"
            },
            {
              "column": "attemptsLeft",
              "value": "={{ $json.usageType === 'attempt' ? 9 : 0 }}"
            },
            {
              "column": "createdAt",
              "value": "={{ new Date().toISOString() }}"
            },
            {
              "column": "lastUsed",
              "value": "={{ new Date().toISOString() }}"
            },
            {
              "column": "totalUsed",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "id": "create-user-node",
      "name": "Create New User",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.shouldCreateUser }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "create-user-if-node",
      "name": "Should Create User?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 450]
    },
    {
      "parameters": {
        "jsCode": "// Generate response for new user\nconst checkResult = $input.item.json;\nconst usageType = checkResult.usageType;\nconst userId = checkResult.extractedData.userId;\nconst userMessage = checkResult.extractedData.userMessage;\n\nlet aiResponse = `Welcome! I've created your account with ${usageType} access. `;\n\nif (usageType === 'token') {\n  aiResponse += \"You start with 50 credits. \";\n} else if (usageType === 'attempt') {\n  aiResponse += \"You have 10 attempts for this session. \";\n} else {\n  aiResponse += \"You have unlimited access. \";\n}\n\naiResponse += `Now, regarding your message: \"${userMessage}\" - how can I help you today?`;\n\nreturn {\n  aiResponse: aiResponse,\n  tokensLeft: usageType === 'token' ? 49 : undefined,\n  attemptsLeft: usageType === 'attempt' ? 9 : undefined,\n  usageType: usageType,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "new-user-response-node",
      "name": "New User Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"response\": $json.aiResponse,\n  \"usageType\": $json.usageType,\n  \"tokensLeft\": $json.tokensLeft,\n  \"attemptsLeft\": $json.attemptsLeft,\n  \"timestamp\": $json.timestamp,\n  \"newUser\": true\n} }}"
      },
      "id": "new-user-webhook-response-node",
      "name": "New User Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 500]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Data": {
      "main": [
        [
          {
            "node": "Lookup User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup User": {
      "main": [
        [
          {
            "node": "Check Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Usage": {
      "main": [
        [
          {
            "node": "Has Usage?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Usage?": {
      "main": [
        [
          {
            "node": "AI Processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Should Create User?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Processing": {
      "main": [
        [
          {
            "node": "Deduct Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduct Usage": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Create User?": {
      "main": [
        [
          {
            "node": "Create New User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New User": {
      "main": [
        [
          {
            "node": "New User Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New User Response": {
      "main": [
        [
          {
            "node": "New User Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}