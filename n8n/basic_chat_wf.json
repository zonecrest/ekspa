{
  "name": "EK Chat",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Extract data from webhook\nconst body = $input.item.json.body;\nconst userMessage = body.message;\nconst userId = body.userId;\nconst usageType = body.usageType || 'token';\nconst timestamp = body.timestamp;\n\n// Validate required fields\nif (!userMessage || !userId) {\n  throw new Error('Missing required fields: message and userId');\n}\n\nreturn {\n  userMessage,\n  userId,\n  usageType,\n  timestamp,\n  originalBody: body\n};"
      },
      "id": "bd863558-5be2-4caa-96d5-ab30057aa5ea",
      "name": "Extract Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1800,
        480
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "16Dr7IaM8bqoA4klHHLFnW80hNSjDS_h7zEtvnWnerB0",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "userId",
              "lookupValue": "={{ $json.userId }}"
            },
            {
              "lookupColumn": "usageType",
              "lookupValue": "={{ $json.usageType }}"
            }
          ]
        },
        "options": {}
      },
      "id": "823c3aec-8c09-4b63-848d-6af99a9b67db",
      "name": "Lookup User",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -1600,
        480
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nnI4RcOEFLH5D9aC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get user data and usage type from previous nodes\nconst extractedData = $('Extract Data').first().json;\nconst userData = $input.item.json;\nconst usageType = extractedData.usageType;\n\n// Check if user exists\nif (!userData || !userData.userId) {\n  return {\n    hasAccess: false,\n    error: 'User not found',\n    usageType: usageType,\n    extractedData: extractedData\n  };\n}\n\n// Unlimited users always have access\nif (usageType === 'unlimited') {\n  return {\n    hasAccess: true,\n    usageType: usageType,\n    userData: userData,\n    extractedData: extractedData\n  };\n}\n\n// Token-based users (both 'token' and 'attempt' types)\nconst tokensLeft = parseInt(userData.tokensLeft) || 0;\nif (tokensLeft <= 0) {\n  return {\n    hasAccess: false,\n    error: 'Credits exhausted',\n    tokensLeft: 0,\n    usageType: usageType,\n    extractedData: extractedData\n  };\n}\n\nreturn {\n  hasAccess: true,\n  tokensLeft: tokensLeft,\n  usageType: usageType,\n  userData: userData,\n  extractedData: extractedData\n};"
      },
      "id": "486e980d-8902-4500-a9d6-d8d3447d4a1f",
      "name": "Check Access",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1400,
        480
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.hasAccess }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "a97aa4fc-95b2-4c7e-baf1-baa0faf9bad3",
              "leftValue": "={{ $json.hasAccess }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "407eeb6e-0ae9-4e2a-9b4a-ab68469432d8",
      "name": "Has Access?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1200,
        480
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "16Dr7IaM8bqoA4klHHLFnW80hNSjDS_h7zEtvnWnerB0",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tokensLeft": "={{ $('Check Access').item.json.tokensLeft - 1 }}",
            "lastUsed": "={{ new Date().toISOString() }}",
            "totalUsed": "={{ parseInt($('Check Access').item.json.userData.totalUsed || 0) + 1 }}",
            "userId": "={{ $json.userData.userId }}"
          },
          "matchingColumns": [
            "userId"
          ],
          "schema": [
            {
              "id": "userId",
              "displayName": "userId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "usageType",
              "displayName": "usageType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tokensLeft",
              "displayName": "tokensLeft",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "lastUsed",
              "displayName": "lastUsed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "totalUsed",
              "displayName": "totalUsed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "43a9f812-dc44-4a04-b2f7-d9756b596fe6",
      "name": "Deduct Usage",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -1000,
        380
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nnI4RcOEFLH5D9aC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the data we need for the AI response\nconst extractedData = $('Extract Data').first().json;\nconst checkResult = $('Check Access').first().json;\nconst userMessage = extractedData.userMessage;\nconst userId = extractedData.userId;\nconst usageType = extractedData.usageType;\n\n// For now, return a simple response\n// This is where you would integrate with your AI service\nconst aiResponse = `Hello! I received your message: \"${userMessage}\". This is a placeholder response from the AI tutor system.`;\n\n// Calculate remaining tokens\nlet tokensLeft = undefined;\nif (usageType !== 'unlimited') {\n  tokensLeft = checkResult.tokensLeft - 1; // Already deducted in previous node\n}\n\nreturn {\n  success: true,\n  response: aiResponse,\n  usageType: usageType,\n  tokensLeft: tokensLeft,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "a9c6b14d-18fa-4749-8106-56f7559780f6",
      "name": "AI Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        380
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "183f200b-9658-420f-af5a-808f030990df",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -600,
        380
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": $json.error,\n  \"usageType\": $json.usageType,\n  \"tokensLeft\": $json.tokensLeft || undefined,\n  \"timestamp\": new Date().toISOString()\n} }}",
        "options": {}
      },
      "id": "6208dfd4-81ef-4c5d-8c49-996b27be9743",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1000,
        580
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-demo",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "fd064d7c-5fa4-4f5d-9857-36c20176ba6e",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2000,
        480
      ],
      "webhookId": "c2bf7b0a-56f0-4a36-b494-0d9676156241"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract Data": {
      "main": [
        [
          {
            "node": "Lookup User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup User": {
      "main": [
        [
          {
            "node": "Check Access",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Access": {
      "main": [
        [
          {
            "node": "Has Access?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Access?": {
      "main": [
        [
          {
            "node": "Deduct Usage",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduct Usage": {
      "main": [
        [
          {
            "node": "AI Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Processing": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "60910a03-8353-46b1-ab5a-43b4a36012df",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8857352084e2032742f2e94f9a3cf3d36e1309bdac7d1d372756fe9073339ed2"
  },
  "id": "OG1BYvaZBHSPG48E",
  "tags": []
}